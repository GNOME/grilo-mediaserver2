/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_UPnP_MediaServer2
#define DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_UPnP_MediaServer2

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_UPnP_MediaServer2_get_children (DBusGProxy *proxy, const char * IN_id, const guint IN_offset, const gint IN_max_count, const char ** IN_filter, GHashTable** OUT_children, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetChildren", error, G_TYPE_STRING, IN_id, G_TYPE_UINT, IN_offset, G_TYPE_INT, IN_max_count, G_TYPE_STRV, IN_filter, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, dbus_g_type_get_collection ("GPtrArray", G_TYPE_VALUE)), OUT_children, G_TYPE_INVALID);
}

typedef void (*org_gnome_UPnP_MediaServer2_get_children_reply) (DBusGProxy *proxy, GHashTable *OUT_children, GError *error, gpointer userdata);

static void
org_gnome_UPnP_MediaServer2_get_children_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_children;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, dbus_g_type_get_collection ("GPtrArray", G_TYPE_VALUE)), &OUT_children, G_TYPE_INVALID);
  (*(org_gnome_UPnP_MediaServer2_get_children_reply)data->cb) (proxy, OUT_children, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_UPnP_MediaServer2_get_children_async (DBusGProxy *proxy, const char * IN_id, const guint IN_offset, const gint IN_max_count, const char ** IN_filter, org_gnome_UPnP_MediaServer2_get_children_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetChildren", org_gnome_UPnP_MediaServer2_get_children_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_id, G_TYPE_UINT, IN_offset, G_TYPE_INT, IN_max_count, G_TYPE_STRV, IN_filter, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_UPnP_MediaServer2_get_properties (DBusGProxy *proxy, const char * IN_id, const char ** IN_filter, GPtrArray** OUT_properties, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProperties", error, G_TYPE_STRING, IN_id, G_TYPE_STRV, IN_filter, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", G_TYPE_VALUE), OUT_properties, G_TYPE_INVALID);
}

typedef void (*org_gnome_UPnP_MediaServer2_get_properties_reply) (DBusGProxy *proxy, GPtrArray *OUT_properties, GError *error, gpointer userdata);

static void
org_gnome_UPnP_MediaServer2_get_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_properties;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", G_TYPE_VALUE), &OUT_properties, G_TYPE_INVALID);
  (*(org_gnome_UPnP_MediaServer2_get_properties_reply)data->cb) (proxy, OUT_properties, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_UPnP_MediaServer2_get_properties_async (DBusGProxy *proxy, const char * IN_id, const char ** IN_filter, org_gnome_UPnP_MediaServer2_get_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProperties", org_gnome_UPnP_MediaServer2_get_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_id, G_TYPE_STRV, IN_filter, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_UPnP_MediaServer2 */

G_END_DECLS
